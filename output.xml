<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1 (Python 3.9.7 on win32)" generated="20221008 17:00:05.340" rpa="false" schemaversion="2">
<suite id="s1" name="Tests" source="C:\Users\kapoo\Downloads\Compressed\Oppenheimer-20221002T171833Z-001\Oppenheimer\Oppenheimer\Tests">
<suite id="s1-s1" name="User Story 1" source="C:\Users\kapoo\Downloads\Compressed\Oppenheimer-20221002T171833Z-001\Oppenheimer\Oppenheimer\Tests\User_Story_1.robot">
<test id="s1-s1-t1" name="TC_1: Insert a single record of working class">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insert</arg>
<arg>${Request_header}</arg>
<arg>${Single_record}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.659" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insert&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: {'birthday': 21111992, 'gender': 'F', 'name': 'KAmani', 'natid': 'KKD32ABS', 'salary': 22388883, 'tax': 22}&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.659" endtime="20221008 17:00:05.659"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:05.659" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:05.659" endtime="20221008 17:00:05.659"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:05.675" level="INFO">POST Request : url=http://localhost:8080//calculator/insert 
 path_url=//calculator/insert 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '107'} 
 body={"birthday": 21111992, "gender": "F", "name": "KAmani", "natid": "KKD32ABS", "salary": 22388883, "tax": 22} 
 </msg>
<msg timestamp="20221008 17:00:05.675" level="INFO">POST Response : url=http://localhost:8080//calculator/insert 
 status=202, reason= 
 body=Alright 
 </msg>
<msg timestamp="20221008 17:00:05.675" level="INFO">${API_RESPONSE} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.659" endtime="20221008 17:00:05.675"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:05.675" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:05.675" level="INFO">202</msg>
<msg timestamp="20221008 17:00:05.675" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:05.675" level="INFO">Alright</msg>
<msg timestamp="20221008 17:00:05.690" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:05.690" level="INFO">{'Content-Type': 'text/plain;charset=UTF-8', 'Content-Length': '7', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT'}</msg>
<status status="PASS" starttime="20221008 17:00:05.675" endtime="20221008 17:00:05.690"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:05.690" level="INFO">${API_RESPONSE} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.690" endtime="20221008 17:00:05.690"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.659" endtime="20221008 17:00:05.690"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>202</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.690" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 202&lt;br&gt;Expected Response Status Code: 202&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.690" endtime="20221008 17:00:05.690"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:05.690" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.690" endtime="20221008 17:00:05.690"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.690" endtime="20221008 17:00:05.690"/>
</kw>
<doc>This test case can add single record in database via Post API</doc>
<tag>regression</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20221008 17:00:05.659" endtime="20221008 17:00:05.690"/>
</test>
<test id="s1-s1-t2" name="TC_2: Insert a list of records and validate the response">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insert</arg>
<arg>${Request_header}</arg>
<arg>${Multiple_records}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.706" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insert&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: [{'birthday': 21111992, 'gender': 'F', 'name': 'Kristine', 'natid': 'QQD32ABS', 'salary': 18388883, 'tax': 12}, {'birthday': 10111992, 'gender': 'M', 'name': 'Harshil', 'natid': 'LKLD32ABS', 'salary': 7568883, 'tax': 21}]&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.706" endtime="20221008 17:00:05.706"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:05.706" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:05.706" endtime="20221008 17:00:05.706"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:05.737" level="INFO">POST Request : url=http://localhost:8080//calculator/insert 
 path_url=//calculator/insert 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '221'} 
 body=[{"birthday": 21111992, "gender": "F", "name": "Kristine", "natid": "QQD32ABS", "salary": 18388883, "tax": 12}, {"birthday": 10111992, "gender": "M", "name": "Harshil", "natid": "LKLD32ABS", "salary": 7568883, "tax": 21}] 
 </msg>
<msg timestamp="20221008 17:00:05.737" level="INFO">POST Response : url=http://localhost:8080//calculator/insert 
 status=400, reason= 
 body={"timestamp":"2022-10-08T11:30:05.721+0000","status":400,"error":"Bad Request","message":"JSON parse error: Cannot deserialize instance of `com.govtech.sampleservice.service.dtos.WorkingClassHeroDto` out of START_ARRAY token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `com.govtech.sampleservice.service.dtos.WorkingClassHeroDto` out of START_ARRAY token\n at [Source: (PushbackInputStream); line: 1, column: 1]","path":"//calculator/insert"} 
 </msg>
<msg timestamp="20221008 17:00:05.737" level="INFO">${API_RESPONSE} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.706" endtime="20221008 17:00:05.737"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:05.737" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:05.737" level="INFO">400</msg>
<msg timestamp="20221008 17:00:05.737" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:05.737" level="INFO">{"timestamp":"2022-10-08T11:30:05.721+0000","status":400,"error":"Bad Request","message":"JSON parse error: Cannot deserialize instance of `com.govtech.sampleservice.service.dtos.WorkingClassHeroDto` out of START_ARRAY token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `com.govtech.sampleservice.service.dtos.WorkingClassHeroDto` out of START_ARRAY token\n at [Source: (PushbackInputStream); line: 1, column: 1]","path":"//calculator/insert"}</msg>
<msg timestamp="20221008 17:00:05.737" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:05.737" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT', 'Connection': 'close'}</msg>
<status status="PASS" starttime="20221008 17:00:05.737" endtime="20221008 17:00:05.737"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:05.737" level="INFO">${API_RESPONSE} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.737" endtime="20221008 17:00:05.737"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.706" endtime="20221008 17:00:05.737"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>400</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.753" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 400&lt;br&gt;Expected Response Status Code: 400&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.737" endtime="20221008 17:00:05.753"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:05.753" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.753" endtime="20221008 17:00:05.753"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.737" endtime="20221008 17:00:05.753"/>
</kw>
<kw name="Verify the API Response body contains Error Message" library="API_Helper">
<arg>Bad Request</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${response_body}</var>
<arg>${API_RESPONSE.content}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20221008 17:00:05.753" level="INFO">${response_body} = {"timestamp":"2022-10-08T11:30:05.721+0000","status":400,"error":"Bad Request","message":"JSON parse error: Cannot deserialize instance of `com.govtech.sampleservice.service.dtos.WorkingClassHeroDto` ...</msg>
<status status="PASS" starttime="20221008 17:00:05.753" endtime="20221008 17:00:05.753"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${response_body}</arg>
<arg>${error_msg}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20221008 17:00:05.753" endtime="20221008 17:00:05.753"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.753" endtime="20221008 17:00:05.753"/>
</kw>
<doc>In this test case will try to add list of json and validate the error response.</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:05.706" endtime="20221008 17:00:05.753"/>
</test>
<test id="s1-s1-t3" name="TC_3: Insert a incorrect record and validate the response">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insert</arg>
<arg>${Request_header}</arg>
<arg>${Incorrect_record}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.769" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insert&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: {'birthday': 21111992, 'gender': 'F', 'name': 'Kirti'}&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.769" endtime="20221008 17:00:05.769"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:05.769" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:05.769" endtime="20221008 17:00:05.769"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:05.784" level="INFO">POST Request : url=http://localhost:8080//calculator/insert 
 path_url=//calculator/insert 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '54'} 
 body={"birthday": 21111992, "gender": "F", "name": "Kirti"} 
 </msg>
<msg timestamp="20221008 17:00:05.784" level="INFO">POST Response : url=http://localhost:8080//calculator/insert 
 status=500, reason= 
 body={"timestamp":"2022-10-08T11:30:05.784+0000","status":500,"error":"Internal Server Error","message":"No message available","path":"//calculator/insert"} 
 </msg>
<msg timestamp="20221008 17:00:05.784" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.769" endtime="20221008 17:00:05.784"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:05.784" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:05.800" level="INFO">500</msg>
<msg timestamp="20221008 17:00:05.800" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:05.800" level="INFO">{"timestamp":"2022-10-08T11:30:05.784+0000","status":500,"error":"Internal Server Error","message":"No message available","path":"//calculator/insert"}</msg>
<msg timestamp="20221008 17:00:05.800" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:05.800" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT', 'Connection': 'close'}</msg>
<status status="PASS" starttime="20221008 17:00:05.784" endtime="20221008 17:00:05.800"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:05.800" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.800" endtime="20221008 17:00:05.800"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.769" endtime="20221008 17:00:05.800"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>500</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.800" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 500&lt;br&gt;Expected Response Status Code: 500&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.800" endtime="20221008 17:00:05.800"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:05.800" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.800" endtime="20221008 17:00:05.800"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.800" endtime="20221008 17:00:05.800"/>
</kw>
<kw name="Verify the API Response body contains Error Message" library="API_Helper">
<arg>Internal Server Error</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${response_body}</var>
<arg>${API_RESPONSE.content}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20221008 17:00:05.815" level="INFO">${response_body} = {"timestamp":"2022-10-08T11:30:05.784+0000","status":500,"error":"Internal Server Error","message":"No message available","path":"//calculator/insert"}</msg>
<status status="PASS" starttime="20221008 17:00:05.800" endtime="20221008 17:00:05.815"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${response_body}</arg>
<arg>${error_msg}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20221008 17:00:05.815" endtime="20221008 17:00:05.815"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.800" endtime="20221008 17:00:05.815"/>
</kw>
<doc>In this test case will add incorrect form of json and validate the error response.</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:05.769" endtime="20221008 17:00:05.815"/>
</test>
<test id="s1-s1-t4" name="TC_4: Insert a record with invalid format of Gender and validate the response">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insert</arg>
<arg>${Request_header}</arg>
<arg>${Incorrect_Gender_format}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.815" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insert&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: {'birthday': 21111992, 'gender': 'Male', 'name': 'Krishna', 'natid': 'HKR1233', 'salary': 565658, 'tax': 32}&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.815" endtime="20221008 17:00:05.831"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:05.832" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:05.831" endtime="20221008 17:00:05.832"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:05.878" level="INFO">POST Request : url=http://localhost:8080//calculator/insert 
 path_url=//calculator/insert 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '108'} 
 body={"birthday": 21111992, "gender": "Male", "name": "Krishna", "natid": "HKR1233", "salary": 565658, "tax": 32} 
 </msg>
<msg timestamp="20221008 17:00:05.878" level="INFO">POST Response : url=http://localhost:8080//calculator/insert 
 status=500, reason= 
 body={"timestamp":"2022-10-08T11:30:05.877+0000","status":500,"error":"Internal Server Error","message":"could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not execute statement","path":"//calculator/insert"} 
 </msg>
<msg timestamp="20221008 17:00:05.878" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.832" endtime="20221008 17:00:05.878"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:05.878" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:05.878" level="INFO">500</msg>
<msg timestamp="20221008 17:00:05.878" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:05.878" level="INFO">{"timestamp":"2022-10-08T11:30:05.877+0000","status":500,"error":"Internal Server Error","message":"could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not execute statement","path":"//calculator/insert"}</msg>
<msg timestamp="20221008 17:00:05.878" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:05.893" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT', 'Connection': 'close'}</msg>
<status status="PASS" starttime="20221008 17:00:05.878" endtime="20221008 17:00:05.893"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:05.893" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.893" endtime="20221008 17:00:05.893"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.815" endtime="20221008 17:00:05.893"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>500</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.893" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 500&lt;br&gt;Expected Response Status Code: 500&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.893" endtime="20221008 17:00:05.893"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:05.893" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.893" endtime="20221008 17:00:05.893"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.893" endtime="20221008 17:00:05.893"/>
</kw>
<kw name="Verify the API Response body contains Error Message" library="API_Helper">
<arg>could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not execute statement</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${response_body}</var>
<arg>${API_RESPONSE.content}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20221008 17:00:05.909" level="INFO">${response_body} = {"timestamp":"2022-10-08T11:30:05.877+0000","status":500,"error":"Internal Server Error","message":"could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: c...</msg>
<status status="PASS" starttime="20221008 17:00:05.909" endtime="20221008 17:00:05.909"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${response_body}</arg>
<arg>${error_msg}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20221008 17:00:05.909" endtime="20221008 17:00:05.909"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.893" endtime="20221008 17:00:05.909"/>
</kw>
<doc>In this test case will add incorrect form of json and validate the error response.</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:05.815" endtime="20221008 17:00:05.909"/>
</test>
<test id="s1-s1-t5" name="TC_5: Insert a record with invalid birthday format and validate the response">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insert</arg>
<arg>${Request_header}</arg>
<arg>${Incorrect_birthday_format}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.925" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insert&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: {'birthday': 19951122, 'gender': 'F', 'name': 'Shristi', 'natid': 'JJKK4545', 'salary': 22388883, 'tax': 2}&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.925" endtime="20221008 17:00:05.925"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:05.925" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:05.925" endtime="20221008 17:00:05.925"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:05.972" level="INFO">POST Request : url=http://localhost:8080//calculator/insert 
 path_url=//calculator/insert 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '107'} 
 body={"birthday": 19951122, "gender": "F", "name": "Shristi", "natid": "JJKK4545", "salary": 22388883, "tax": 2} 
 </msg>
<msg timestamp="20221008 17:00:05.972" level="INFO">POST Response : url=http://localhost:8080//calculator/insert 
 status=500, reason= 
 body={"timestamp":"2022-10-08T11:30:05.971+0000","status":500,"error":"Internal Server Error","message":"Text '19951122' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 95","path":"//calculator/insert"} 
 </msg>
<msg timestamp="20221008 17:00:05.972" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.925" endtime="20221008 17:00:05.972"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:05.972" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:05.972" level="INFO">500</msg>
<msg timestamp="20221008 17:00:05.972" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:05.972" level="INFO">{"timestamp":"2022-10-08T11:30:05.971+0000","status":500,"error":"Internal Server Error","message":"Text '19951122' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 95","path":"//calculator/insert"}</msg>
<msg timestamp="20221008 17:00:05.972" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:05.972" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT', 'Connection': 'close'}</msg>
<status status="PASS" starttime="20221008 17:00:05.972" endtime="20221008 17:00:05.972"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:05.972" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.972" endtime="20221008 17:00:05.972"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.909" endtime="20221008 17:00:05.987"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>500</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:05.992" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 500&lt;br&gt;Expected Response Status Code: 500&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.989" endtime="20221008 17:00:05.992"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:05.995" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:05.995" endtime="20221008 17:00:05.995"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.989" endtime="20221008 17:00:05.995"/>
</kw>
<kw name="Verify the API Response body contains Error Message" library="API_Helper">
<arg>Text '19951122' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 95</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${response_body}</var>
<arg>${API_RESPONSE.content}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20221008 17:00:06.003" level="INFO">${response_body} = {"timestamp":"2022-10-08T11:30:05.971+0000","status":500,"error":"Internal Server Error","message":"Text '19951122' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 95","path"...</msg>
<status status="PASS" starttime="20221008 17:00:05.995" endtime="20221008 17:00:06.003"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${response_body}</arg>
<arg>${error_msg}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20221008 17:00:06.003" endtime="20221008 17:00:06.003"/>
</kw>
<status status="PASS" starttime="20221008 17:00:05.995" endtime="20221008 17:00:06.003"/>
</kw>
<doc>In this test case will add incorrect form of json and validate the error response.</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:05.909" endtime="20221008 17:00:06.003"/>
</test>
<status status="PASS" starttime="20221008 17:00:05.356" endtime="20221008 17:00:06.011"/>
</suite>
<suite id="s1-s2" name="User Story 2" source="C:\Users\kapoo\Downloads\Compressed\Oppenheimer-20221002T171833Z-001\Oppenheimer\Oppenheimer\Tests\User_Story_2.robot">
<test id="s1-s2-t1" name="TC_1: Insert a multiple records of working class">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insertMultiple</arg>
<arg>${Request_header}</arg>
<arg>${Multiple_records}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.060" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insertMultiple&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: [{'birthday': 21111992, 'gender': 'F', 'name': 'Kristine', 'natid': 'QQD32ABS', 'salary': 18388883, 'tax': 12}, {'birthday': 10111992, 'gender': 'M', 'name': 'Harshil', 'natid': 'LKLD32ABS', 'salary': 7568883, 'tax': 21}]&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.060" endtime="20221008 17:00:06.060"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:06.060" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:06.060" endtime="20221008 17:00:06.060"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:06.068" level="INFO">POST Request : url=http://localhost:8080//calculator/insertMultiple 
 path_url=//calculator/insertMultiple 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '221'} 
 body=[{"birthday": 21111992, "gender": "F", "name": "Kristine", "natid": "QQD32ABS", "salary": 18388883, "tax": 12}, {"birthday": 10111992, "gender": "M", "name": "Harshil", "natid": "LKLD32ABS", "salary": 7568883, "tax": 21}] 
 </msg>
<msg timestamp="20221008 17:00:06.068" level="INFO">POST Response : url=http://localhost:8080//calculator/insertMultiple 
 status=202, reason= 
 body=Alright 
 </msg>
<msg timestamp="20221008 17:00:06.068" level="INFO">${API_RESPONSE} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.060" endtime="20221008 17:00:06.068"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:06.076" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:06.076" level="INFO">202</msg>
<msg timestamp="20221008 17:00:06.076" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:06.076" level="INFO">Alright</msg>
<msg timestamp="20221008 17:00:06.076" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:06.076" level="INFO">{'Content-Type': 'text/plain;charset=UTF-8', 'Content-Length': '7', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT'}</msg>
<status status="PASS" starttime="20221008 17:00:06.076" endtime="20221008 17:00:06.076"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:06.076" level="INFO">${API_RESPONSE} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.076" endtime="20221008 17:00:06.076"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.060" endtime="20221008 17:00:06.076"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>202</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.076" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 202&lt;br&gt;Expected Response Status Code: 202&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.076" endtime="20221008 17:00:06.076"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:06.076" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.076" endtime="20221008 17:00:06.076"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.076" endtime="20221008 17:00:06.076"/>
</kw>
<doc>This test case can add more than one record in database via Post API</doc>
<tag>regression</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20221008 17:00:06.060" endtime="20221008 17:00:06.076"/>
</test>
<test id="s1-s2-t2" name="TC_2: Insert a single record of working class">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insertMultiple</arg>
<arg>${Request_header}</arg>
<arg>${Single_record}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.084" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insertMultiple&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: {'birthday': 21111992, 'gender': 'F', 'name': 'KAmani', 'natid': 'KKD32ABS', 'salary': 22388883, 'tax': 22}&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.084" endtime="20221008 17:00:06.084"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:06.084" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:06.084" endtime="20221008 17:00:06.084"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:06.093" level="INFO">POST Request : url=http://localhost:8080//calculator/insertMultiple 
 path_url=//calculator/insertMultiple 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '107'} 
 body={"birthday": 21111992, "gender": "F", "name": "KAmani", "natid": "KKD32ABS", "salary": 22388883, "tax": 22} 
 </msg>
<msg timestamp="20221008 17:00:06.093" level="INFO">POST Response : url=http://localhost:8080//calculator/insertMultiple 
 status=400, reason= 
 body={"timestamp":"2022-10-08T11:30:06.092+0000","status":400,"error":"Bad Request","message":"JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]","path":"//calculator/insertMultiple"} 
 </msg>
<msg timestamp="20221008 17:00:06.093" level="INFO">${API_RESPONSE} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.084" endtime="20221008 17:00:06.093"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:06.093" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:06.093" level="INFO">400</msg>
<msg timestamp="20221008 17:00:06.093" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:06.093" level="INFO">{"timestamp":"2022-10-08T11:30:06.092+0000","status":400,"error":"Bad Request","message":"JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\n at [Source: (PushbackInputStream); line: 1, column: 1]","path":"//calculator/insertMultiple"}</msg>
<msg timestamp="20221008 17:00:06.093" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:06.093" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT', 'Connection': 'close'}</msg>
<status status="PASS" starttime="20221008 17:00:06.093" endtime="20221008 17:00:06.093"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:06.093" level="INFO">${API_RESPONSE} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.093" endtime="20221008 17:00:06.093"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.084" endtime="20221008 17:00:06.093"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>400</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.093" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 400&lt;br&gt;Expected Response Status Code: 400&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.093" endtime="20221008 17:00:06.093"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:06.093" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.093" endtime="20221008 17:00:06.093"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.093" endtime="20221008 17:00:06.093"/>
</kw>
<kw name="Verify the API Response body contains Error Message" library="API_Helper">
<arg>JSON parse error</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${response_body}</var>
<arg>${API_RESPONSE.content}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20221008 17:00:06.108" level="INFO">${response_body} = {"timestamp":"2022-10-08T11:30:06.092+0000","status":400,"error":"Bad Request","message":"JSON parse error: Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token; nested excep...</msg>
<status status="PASS" starttime="20221008 17:00:06.108" endtime="20221008 17:00:06.108"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${response_body}</arg>
<arg>${error_msg}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20221008 17:00:06.108" endtime="20221008 17:00:06.108"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.093" endtime="20221008 17:00:06.108"/>
</kw>
<doc>This test case we are adding one record i.e JSON in database via Post API</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:06.084" endtime="20221008 17:00:06.108"/>
</test>
<test id="s1-s2-t3" name="TC_3: Insert a incorrect record and validate the response">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insertMultiple</arg>
<arg>${Request_header}</arg>
<arg>${Incorrect_record}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.108" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insertMultiple&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: [{'birthday': 21111992, 'natid': 'QQD32ABS', 'salary': 18388883, 'tax': 12}, {'birthday': 10111992, 'gender': 'M', 'name': 'Harshil'}]&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.108" endtime="20221008 17:00:06.108"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:06.108" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:06.108" endtime="20221008 17:00:06.108"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:06.140" level="INFO">POST Request : url=http://localhost:8080//calculator/insertMultiple 
 path_url=//calculator/insertMultiple 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '134'} 
 body=[{"birthday": 21111992, "natid": "QQD32ABS", "salary": 18388883, "tax": 12}, {"birthday": 10111992, "gender": "M", "name": "Harshil"}] 
 </msg>
<msg timestamp="20221008 17:00:06.140" level="INFO">POST Response : url=http://localhost:8080//calculator/insertMultiple 
 status=500, reason= 
 body={"timestamp":"2022-10-08T11:30:06.139+0000","status":500,"error":"Internal Server Error","message":"No message available","path":"//calculator/insertMultiple"} 
 </msg>
<msg timestamp="20221008 17:00:06.140" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.108" endtime="20221008 17:00:06.140"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:06.140" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:06.140" level="INFO">500</msg>
<msg timestamp="20221008 17:00:06.140" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:06.140" level="INFO">{"timestamp":"2022-10-08T11:30:06.139+0000","status":500,"error":"Internal Server Error","message":"No message available","path":"//calculator/insertMultiple"}</msg>
<msg timestamp="20221008 17:00:06.140" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:06.140" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT', 'Connection': 'close'}</msg>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.140"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:06.140" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.140"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.108" endtime="20221008 17:00:06.140"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>500</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.140" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 500&lt;br&gt;Expected Response Status Code: 500&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.140"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:06.140" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.140"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.140"/>
</kw>
<kw name="Verify the API Response body contains Error Message" library="API_Helper">
<arg>Internal Server Error</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${response_body}</var>
<arg>${API_RESPONSE.content}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20221008 17:00:06.140" level="INFO">${response_body} = {"timestamp":"2022-10-08T11:30:06.139+0000","status":500,"error":"Internal Server Error","message":"No message available","path":"//calculator/insertMultiple"}</msg>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.140"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${response_body}</arg>
<arg>${error_msg}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.140"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.140"/>
</kw>
<doc>In this test case will add incorrect form of json and validate the error response.</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:06.108" endtime="20221008 17:00:06.140"/>
</test>
<test id="s1-s2-t4" name="TC_4: Insert a record with invalid format of Gender and validate the response">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insertMultiple</arg>
<arg>${Request_header}</arg>
<arg>${Incorrect_Gender_format}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.155" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insertMultiple&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: [{'birthday': 21111992, 'gender': 'Male', 'name': 'Krishna', 'natid': 'HKR1233', 'salary': 565658, 'tax': 32}, {'birthday': 21111992, 'gender': 'Male', 'name': 'Krishna', 'natid': 'HKR1233', 'salary': 565658, 'tax': 32}]&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.155" endtime="20221008 17:00:06.155"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:06.155" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:06.155" endtime="20221008 17:00:06.155"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:06.155" level="INFO">POST Request : url=http://localhost:8080//calculator/insertMultiple 
 path_url=//calculator/insertMultiple 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '220'} 
 body=[{"birthday": 21111992, "gender": "Male", "name": "Krishna", "natid": "HKR1233", "salary": 565658, "tax": 32}, {"birthday": 21111992, "gender": "Male", "name": "Krishna", "natid": "HKR1233", "salary": 565658, "tax": 32}] 
 </msg>
<msg timestamp="20221008 17:00:06.155" level="INFO">POST Response : url=http://localhost:8080//calculator/insertMultiple 
 status=500, reason= 
 body={"timestamp":"2022-10-08T11:30:06.155+0000","status":500,"error":"Internal Server Error","message":"could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not execute statement","path":"//calculator/insertMultiple"} 
 </msg>
<msg timestamp="20221008 17:00:06.155" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.155" endtime="20221008 17:00:06.155"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:06.155" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:06.171" level="INFO">500</msg>
<msg timestamp="20221008 17:00:06.171" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:06.171" level="INFO">{"timestamp":"2022-10-08T11:30:06.155+0000","status":500,"error":"Internal Server Error","message":"could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not execute statement","path":"//calculator/insertMultiple"}</msg>
<msg timestamp="20221008 17:00:06.171" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:06.171" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT', 'Connection': 'close'}</msg>
<status status="PASS" starttime="20221008 17:00:06.155" endtime="20221008 17:00:06.171"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:06.171" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.171" endtime="20221008 17:00:06.171"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.171"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>500</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.171" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 500&lt;br&gt;Expected Response Status Code: 500&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.171" endtime="20221008 17:00:06.171"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:06.171" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.171" endtime="20221008 17:00:06.171"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.171" endtime="20221008 17:00:06.171"/>
</kw>
<kw name="Verify the API Response body contains Error Message" library="API_Helper">
<arg>could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not execute statement</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${response_body}</var>
<arg>${API_RESPONSE.content}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20221008 17:00:06.171" level="INFO">${response_body} = {"timestamp":"2022-10-08T11:30:06.155+0000","status":500,"error":"Internal Server Error","message":"could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: c...</msg>
<status status="PASS" starttime="20221008 17:00:06.171" endtime="20221008 17:00:06.171"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${response_body}</arg>
<arg>${error_msg}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20221008 17:00:06.171" endtime="20221008 17:00:06.171"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.171" endtime="20221008 17:00:06.171"/>
</kw>
<doc>In this test case will add incorrect form of json and validate the error response.</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:06.140" endtime="20221008 17:00:06.171"/>
</test>
<test id="s1-s2-t5" name="TC_5: Insert a record with invalid birthday format and validate the response">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insertMultiple</arg>
<arg>${Request_header}</arg>
<arg>${Incorrect_birthday_format}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.186" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insertMultiple&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: [{'birthday': 19951122, 'gender': 'F', 'name': 'Shristi', 'natid': 'JJKK4545', 'salary': 22388883, 'tax': 2}, {'birthday': 19951122, 'gender': 'F', 'name': 'Simran', 'natid': 'JJKK4545', 'salary': 22388883, 'tax': 25}]&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.186" endtime="20221008 17:00:06.186"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:06.186" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:06.186" endtime="20221008 17:00:06.186"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:06.186" level="INFO">POST Request : url=http://localhost:8080//calculator/insertMultiple 
 path_url=//calculator/insertMultiple 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '218'} 
 body=[{"birthday": 19951122, "gender": "F", "name": "Shristi", "natid": "JJKK4545", "salary": 22388883, "tax": 2}, {"birthday": 19951122, "gender": "F", "name": "Simran", "natid": "JJKK4545", "salary": 22388883, "tax": 25}] 
 </msg>
<msg timestamp="20221008 17:00:06.186" level="INFO">POST Response : url=http://localhost:8080//calculator/insertMultiple 
 status=500, reason= 
 body={"timestamp":"2022-10-08T11:30:06.186+0000","status":500,"error":"Internal Server Error","message":"Text '19951122' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 95","path":"//calculator/insertMultiple"} 
 </msg>
<msg timestamp="20221008 17:00:06.186" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.186" endtime="20221008 17:00:06.186"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:06.186" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:06.186" level="INFO">500</msg>
<msg timestamp="20221008 17:00:06.186" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:06.202" level="INFO">{"timestamp":"2022-10-08T11:30:06.186+0000","status":500,"error":"Internal Server Error","message":"Text '19951122' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 95","path":"//calculator/insertMultiple"}</msg>
<msg timestamp="20221008 17:00:06.202" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:06.202" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:05 GMT', 'Connection': 'close'}</msg>
<status status="PASS" starttime="20221008 17:00:06.186" endtime="20221008 17:00:06.202"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:06.202" level="INFO">${API_RESPONSE} = &lt;Response [500]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.202" endtime="20221008 17:00:06.202"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.186" endtime="20221008 17:00:06.202"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>500</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:06.202" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 500&lt;br&gt;Expected Response Status Code: 500&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.202" endtime="20221008 17:00:06.202"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:06.202" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:06.202" endtime="20221008 17:00:06.202"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.202" endtime="20221008 17:00:06.202"/>
</kw>
<kw name="Verify the API Response body contains Error Message" library="API_Helper">
<arg>Text '19951122' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 95</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${response_body}</var>
<arg>${API_RESPONSE.content}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20221008 17:00:06.202" level="INFO">${response_body} = {"timestamp":"2022-10-08T11:30:06.186+0000","status":500,"error":"Internal Server Error","message":"Text '19951122' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 95","path"...</msg>
<status status="PASS" starttime="20221008 17:00:06.202" endtime="20221008 17:00:06.202"/>
</kw>
<kw name="Should Contain" library="BuiltIn">
<arg>${response_body}</arg>
<arg>${error_msg}</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20221008 17:00:06.202" endtime="20221008 17:00:06.202"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.202" endtime="20221008 17:00:06.202"/>
</kw>
<doc>In this test case will add incorrect form of json and validate the error response.</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:06.186" endtime="20221008 17:00:06.202"/>
</test>
<status status="PASS" starttime="20221008 17:00:06.021" endtime="20221008 17:00:06.202"/>
</suite>
<suite id="s1-s3" name="User Story 3" source="C:\Users\kapoo\Downloads\Compressed\Oppenheimer-20221002T171833Z-001\Oppenheimer\Oppenheimer\Tests\User_Story_3.robot">
<test id="s1-s3-t1" name="TC_1: Upload records of working class hero using CSV">
<kw name="Navigate to Oppenheimer Project" library="Oppenheimer_common">
<doc>Navigate to the Oppenheimer Project page</doc>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${base_URL}</arg>
<arg>chrome</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20221008 17:00:06.233" level="INFO">Opening browser 'chrome' to base url 'http://localhost:8080/'.</msg>
<status status="PASS" starttime="20221008 17:00:06.218" endtime="20221008 17:00:08.757"/>
</kw>
<kw name="Set Screenshot Directory" library="SeleniumLibrary">
<arg>EMBED</arg>
<doc>Sets the directory for captured screenshots.</doc>
<status status="PASS" starttime="20221008 17:00:08.757" endtime="20221008 17:00:08.757"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20221008 17:00:08.765" endtime="20221008 17:00:08.908"/>
</kw>
<status status="PASS" starttime="20221008 17:00:06.218" endtime="20221008 17:00:08.908"/>
</kw>
<kw name="Upload File" library="Oppenheimer_common">
<arg>${dir_path}</arg>
<doc>Pass xpath(xpath should be related to input tag not button) and path of file</doc>
<kw name="Normalize Path" library="OperatingSystem">
<var>${NORMAL_PATH_UPLOAD_FILE_NAME}</var>
<arg>${File_Path}</arg>
<doc>Normalizes the given path.</doc>
<msg timestamp="20221008 17:00:08.908" level="INFO">${NORMAL_PATH_UPLOAD_FILE_NAME} = C:\Users\kapoo\Downloads\Compressed\Oppenheimer-20221002T171833Z-001\Oppenheimer\Oppenheimer\TestData\working_Class.csv</msg>
<status status="PASS" starttime="20221008 17:00:08.908" endtime="20221008 17:00:08.908"/>
</kw>
<kw name="Choose File" library="SeleniumLibrary">
<arg>${browse_button}</arg>
<arg>${NORMAL_PATH_UPLOAD_FILE_NAME}</arg>
<doc>Inputs the ``file_path`` into the file input field ``locator``.</doc>
<msg timestamp="20221008 17:00:08.908" level="INFO">Sending C:\Users\kapoo\Downloads\Compressed\Oppenheimer-20221002T171833Z-001\Oppenheimer\Oppenheimer\TestData\working_Class.csv to browser.</msg>
<status status="PASS" starttime="20221008 17:00:08.908" endtime="20221008 17:00:08.967"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20221008 17:00:10.973" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20221008 17:00:08.967" endtime="20221008 17:00:10.973"/>
</kw>
<status status="PASS" starttime="20221008 17:00:08.908" endtime="20221008 17:00:10.973"/>
</kw>
<kw name="Click Button" library="SeleniumLibrary">
<arg>${Refresh_Tax_Relief_Table_button}</arg>
<doc>Clicks the button identified by ``locator``.</doc>
<msg timestamp="20221008 17:00:10.973" level="INFO">Clicking button '//*[@class='btn btn-primary']'.</msg>
<status status="PASS" starttime="20221008 17:00:10.973" endtime="20221008 17:00:11.040"/>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>5s</arg>
<arg>1s</arg>
<arg>Page Should Contain Element</arg>
<arg>//tbody/tr/td[text()='${Expected_Natid}']</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<kw name="Page Should Contain Element" library="SeleniumLibrary">
<arg>//tbody/tr/td[text()='${Expected_Natid}']</arg>
<doc>Verifies that element ``locator`` is found on the current page.</doc>
<msg timestamp="20221008 17:00:11.088" level="INFO">Current page contains element '//tbody/tr/td[text()='ASDS$$$$$']'.</msg>
<status status="PASS" starttime="20221008 17:00:11.056" endtime="20221008 17:00:11.088"/>
</kw>
<status status="PASS" starttime="20221008 17:00:11.056" endtime="20221008 17:00:11.088"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="TEARDOWN">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20221008 17:00:11.088" endtime="20221008 17:00:13.266"/>
</kw>
<doc>uploading CSV file on UI page</doc>
<tag>regression</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20221008 17:00:06.218" endtime="20221008 17:00:13.266"/>
</test>
<test id="s1-s3-t2" name="TC_2: validate Upload CSV file and Refresh Tax Relief Table Text from UI">
<kw name="Navigate to Oppenheimer Project" library="Oppenheimer_common">
<doc>Navigate to the Oppenheimer Project page</doc>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${base_URL}</arg>
<arg>chrome</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20221008 17:00:13.266" level="INFO">Opening browser 'chrome' to base url 'http://localhost:8080/'.</msg>
<status status="PASS" starttime="20221008 17:00:13.266" endtime="20221008 17:00:15.537"/>
</kw>
<kw name="Set Screenshot Directory" library="SeleniumLibrary">
<arg>EMBED</arg>
<doc>Sets the directory for captured screenshots.</doc>
<status status="PASS" starttime="20221008 17:00:15.537" endtime="20221008 17:00:15.538"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20221008 17:00:15.538" endtime="20221008 17:00:15.665"/>
</kw>
<status status="PASS" starttime="20221008 17:00:13.266" endtime="20221008 17:00:15.665"/>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<arg>${upload_CSV_file_text}</arg>
<arg>Upload CSV file</arg>
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<msg timestamp="20221008 17:00:15.665" level="INFO">Verifying element '//*[@class='input-group-text']' contains exact text 'Upload CSV file'.</msg>
<status status="PASS" starttime="20221008 17:00:15.665" endtime="20221008 17:00:15.751"/>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<arg>${Refresh_Tax_Relief_Table_button}</arg>
<arg>Refresh Tax Relief Table</arg>
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<msg timestamp="20221008 17:00:15.759" level="INFO">Verifying element '//*[@class='btn btn-primary']' contains exact text 'Refresh Tax Relief Table'.</msg>
<status status="PASS" starttime="20221008 17:00:15.759" endtime="20221008 17:00:15.822"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="TEARDOWN">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20221008 17:00:15.826" endtime="20221008 17:00:17.988"/>
</kw>
<doc>uploading CSV file on UI page</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:13.266" endtime="20221008 17:00:17.988"/>
</test>
<status status="PASS" starttime="20221008 17:00:06.202" endtime="20221008 17:00:17.988"/>
</suite>
<suite id="s1-s4" name="User Story 4" source="C:\Users\kapoo\Downloads\Compressed\Oppenheimer-20221002T171833Z-001\Oppenheimer\Oppenheimer\Tests\User_Story_4.robot">
<test id="s1-s4-t1" name="TC_1: Fetch the details of taxRelief for each person in the database using GET API">
<kw name="Make a GET API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/taxRelief</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Params: ${json_param}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:18.066" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/taxRelief&lt;br&gt;Request Headers: {}&lt;br&gt;Request Params: {}&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.066" endtime="20221008 17:00:18.066"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_GET</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:18.066" level="INFO">Creating Custom Authenticated Session using : alias=API_GET, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:18.066" endtime="20221008 17:00:18.066"/>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_GET</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>params=${json_param}</arg>
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:18.082" level="INFO">GET Request : url=http://localhost:8080//calculator/taxRelief 
 path_url=//calculator/taxRelief 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20221008 17:00:18.098" level="INFO">GET Response : url=http://localhost:8080//calculator/taxRelief 
 status=200, reason= 
 body=[{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"},{"natid":"zzzz$$$$$","name":"caroline","relief":"548.00"},{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"}] 
 </msg>
<msg timestamp="20221008 17:00:18.098" level="INFO">${API_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.066" endtime="20221008 17:00:18.098"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:18.098" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:18.098" level="INFO">200</msg>
<msg timestamp="20221008 17:00:18.098" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:18.098" level="INFO">[{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"},{"natid":"zzzz$$$$$","name":"caroline","relief":"548.00"},{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"}]</msg>
<msg timestamp="20221008 17:00:18.098" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:18.098" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:18 GMT'}</msg>
<status status="PASS" starttime="20221008 17:00:18.098" endtime="20221008 17:00:18.098"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:18.098" level="INFO">${API_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.098" endtime="20221008 17:00:18.098"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.066" endtime="20221008 17:00:18.098"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>200</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:18.113" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 200&lt;br&gt;Expected Response Status Code: 200&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.098" endtime="20221008 17:00:18.113"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:18.113" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.113" endtime="20221008 17:00:18.113"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.098" endtime="20221008 17:00:18.113"/>
</kw>
<kw name="Validate TaxRelief response" library="API_Helper">
<arg>${API_RESPONSE.content}</arg>
<kw name="Get python object for JSON" library="API_Helper">
<var>${python_data}</var>
<arg>${json_value}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${python_data}</var>
<arg>json.loads('''${json_value}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20221008 17:00:18.113" level="INFO">${python_data} = [{'natid': 'KKD3$$$$', 'name': 'KAmani', 'relief': '17911588.81'}, {'natid': 'QQD3$$$$', 'name': 'Kristine', 'relief': '14711596.81'}, {'natid': 'LKLD$$$$$', 'name': 'Harshil', 'relief': '6055089.61'}...</msg>
<status status="PASS" starttime="20221008 17:00:18.113" endtime="20221008 17:00:18.113"/>
</kw>
<msg timestamp="20221008 17:00:18.113" level="INFO">${python_data} = [{'natid': 'KKD3$$$$', 'name': 'KAmani', 'relief': '17911588.81'}, {'natid': 'QQD3$$$$', 'name': 'Kristine', 'relief': '14711596.81'}, {'natid': 'LKLD$$$$$', 'name': 'Harshil', 'relief': '6055089.61'}...</msg>
<status status="PASS" starttime="20221008 17:00:18.113" endtime="20221008 17:00:18.113"/>
</kw>
<kw name="Verify datatype" library="API_Helper">
<var>${is_list}</var>
<arg>${python_data}</arg>
<arg>list</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${is_valid_value}</var>
<arg>isinstance(${value}, ${data_type})</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20221008 17:00:18.129" level="INFO">${is_valid_value} = True</msg>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</kw>
<msg timestamp="20221008 17:00:18.129" level="INFO">${is_list} = True</msg>
<status status="PASS" starttime="20221008 17:00:18.113" endtime="20221008 17:00:18.129"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${is_list}</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${length}</var>
<arg>${python_data}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20221008 17:00:18.129" level="INFO">Length is 11</msg>
<msg timestamp="20221008 17:00:18.129" level="INFO">${length} = 11</msg>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</kw>
<if>
<branch type="IF" condition="${length}&gt;0">
<kw name="Get Dictionary Keys" library="Collections">
<var>${key_list}</var>
<arg>${python_data}[0]</arg>
<doc>Returns keys of the given ``dictionary`` as a list.</doc>
<msg timestamp="20221008 17:00:18.129" level="INFO">${key_list} = ['name', 'natid', 'relief']</msg>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</kw>
<kw name="Lists Should Be Equal" library="Collections">
<arg>${key_list}</arg>
<arg>${expected_keys_in_tax_relief}</arg>
<arg>ignore_order=True</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.113" endtime="20221008 17:00:18.129"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="TEARDOWN">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</kw>
<doc>This test case run the Get api and returns a list consist of natid, tax relief
amount.</doc>
<tag>regression</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20221008 17:00:18.051" endtime="20221008 17:00:18.129"/>
</test>
<test id="s1-s4-t2" name="TC_2: Validate that the natid field must be masked from the 5th character onwards with dollar sign ‘$’">
<kw name="Make a GET API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/taxRelief</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Params: ${json_param}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:18.129" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/taxRelief&lt;br&gt;Request Headers: {}&lt;br&gt;Request Params: {}&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_GET</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:18.129" level="INFO">Creating Custom Authenticated Session using : alias=API_GET, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.129"/>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_GET</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>params=${json_param}</arg>
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:18.144" level="INFO">GET Request : url=http://localhost:8080//calculator/taxRelief 
 path_url=//calculator/taxRelief 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20221008 17:00:18.144" level="INFO">GET Response : url=http://localhost:8080//calculator/taxRelief 
 status=200, reason= 
 body=[{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"},{"natid":"zzzz$$$$$","name":"caroline","relief":"548.00"},{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"}] 
 </msg>
<msg timestamp="20221008 17:00:18.144" level="INFO">${API_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.144"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:18.144" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:18.144" level="INFO">200</msg>
<msg timestamp="20221008 17:00:18.144" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:18.144" level="INFO">[{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"},{"natid":"zzzz$$$$$","name":"caroline","relief":"548.00"},{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"}]</msg>
<msg timestamp="20221008 17:00:18.144" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:18.144" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:18 GMT'}</msg>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:18.144" level="INFO">${API_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.144"/>
</kw>
<kw name="Verify the API Response Code is" library="API_Helper">
<arg>200</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Actual Response Status Code: ${API_RESPONSE.status_code}&lt;br&gt;Expected Response Status Code: ${expected_status_code}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:18.144" level="INFO" html="true">&lt;b&gt;Actual Response Status Code: 200&lt;br&gt;Expected Response Status Code: 200&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${API_RESPONSE.status_code}</arg>
<arg>${expected_status_code}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20221008 17:00:18.144" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<for flavor="IN">
<var>${response_value}</var>
<value>@{API_RESPONSE.json()}</value>
<iter>
<var name="${response_value}">{'natid': 'KKD3$$$$', 'name': 'KAmani', 'relief': '17911588.81'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'QQD3$$$$', 'name': 'Kristine', 'relief': '14711596.81'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'LKLD$$$$$', 'name': 'Harshil', 'relief': '6055089.61'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'ASDS$$$$$', 'name': 'Harshil', 'relief': '1207264.00'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'ered$$$', 'name': 'Rama', 'relief': '1151416.81'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'zzzz$$$$$', 'name': 'caroline', 'relief': '548.00'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'KKD3$$$$', 'name': 'KAmani', 'relief': '17911588.81'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.144"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'QQD3$$$$', 'name': 'Kristine', 'relief': '14711596.81'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.160"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.160"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'LKLD$$$$$', 'name': 'Harshil', 'relief': '6055089.61'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'ASDS$$$$$', 'name': 'Harshil', 'relief': '1207264.00'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</iter>
<iter>
<var name="${response_value}">{'natid': 'ered$$$', 'name': 'Rama', 'relief': '1151416.81'}</var>
<kw name="Should Match Regexp" library="BuiltIn">
<arg>${response_value}[natid]</arg>
<arg>^.{4}\\$*$</arg>
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</iter>
<status status="PASS" starttime="20221008 17:00:18.144" endtime="20221008 17:00:18.160"/>
</for>
<kw name="Close Browser" library="SeleniumLibrary" type="TEARDOWN">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</kw>
<doc>This test case will validate the natid with masked value</doc>
<tag>regression</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20221008 17:00:18.129" endtime="20221008 17:00:18.160"/>
</test>
<test id="s1-s4-t3" name="TC_3: Calculate the computation of the tax relief using the formula as described and round off">
<kw name="Make a POST API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/insert</arg>
<arg>${Request_header}</arg>
<arg>${Single_record}</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Body: ${json_body}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:18.160" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/insert&lt;br&gt;Request Headers: {'Content-Type': 'application/json'}&lt;br&gt;Request Body: {'birthday': 10101995, 'gender': 'F', 'name': 'caroline', 'natid': 'zzzz45655', 'salary': 100, 'tax': 40}&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_POST</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:18.160" level="INFO">Creating Custom Authenticated Session using : alias=API_POST, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_POST</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>data=${json_body}</arg>
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:18.160" level="INFO">POST Request : url=http://localhost:8080//calculator/insert 
 path_url=//calculator/insert 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '105'} 
 body={"birthday": 10101995, "gender": "F", "name": "caroline", "natid": "zzzz45655", "salary": 100, "tax": 40} 
 </msg>
<msg timestamp="20221008 17:00:18.160" level="INFO">POST Response : url=http://localhost:8080//calculator/insert 
 status=202, reason= 
 body=Alright 
 </msg>
<msg timestamp="20221008 17:00:18.160" level="INFO">${API_RESPONSE} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.160"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:18.160" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:18.160" level="INFO">202</msg>
<msg timestamp="20221008 17:00:18.160" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">Alright</msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">{'Content-Type': 'text/plain;charset=UTF-8', 'Content-Length': '7', 'Date': 'Sat, 08 Oct 2022 11:30:18 GMT'}</msg>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.176"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:18.176" level="INFO">${API_RESPONSE} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.176" endtime="20221008 17:00:18.176"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.176"/>
</kw>
<kw name="Make a GET API Request with" library="API_Helper">
<arg>${Base_URL}</arg>
<arg>calculator/taxRelief</arg>
<kw name="Log" library="BuiltIn">
<arg>&lt;b&gt;Domain_URL: ${URL}&lt;br&gt;Path: ${Path}&lt;br&gt;Request Headers: ${json_header}&lt;br&gt;Request Params: ${json_param}&lt;/b&gt;</arg>
<arg>HTML</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20221008 17:00:18.176" level="INFO" html="true">&lt;b&gt;Domain_URL: http://localhost:8080/&lt;br&gt;Path: calculator/taxRelief&lt;br&gt;Request Headers: {}&lt;br&gt;Request Params: {}&lt;/b&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.176" endtime="20221008 17:00:18.176"/>
</kw>
<kw name="Create Custom Session" library="RequestsLibrary">
<arg>API_GET</arg>
<arg>${URL}</arg>
<arg>auth=${EMPTY}</arg>
<arg>disable_warnings=1</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20221008 17:00:18.176" level="INFO">Creating Custom Authenticated Session using : alias=API_GET, url=http://localhost:8080/, headers={},                     cookies={}, auth=, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20221008 17:00:18.176" endtime="20221008 17:00:18.176"/>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<var>${API_RESPONSE}</var>
<arg>API_GET</arg>
<arg>${Path}</arg>
<arg>headers=${json_header}</arg>
<arg>params=${json_param}</arg>
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<msg timestamp="20221008 17:00:18.176" level="INFO">GET Request : url=http://localhost:8080//calculator/taxRelief 
 path_url=//calculator/taxRelief 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">GET Response : url=http://localhost:8080//calculator/taxRelief 
 status=200, reason= 
 body=[{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"},{"natid":"zzzz$$$$$","name":"caroline","relief":"548.00"},{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"},{"natid":"zzzz$$$$$","name":"caroline","relief":"548.00"}] 
 </msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">${API_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.176" endtime="20221008 17:00:18.176"/>
</kw>
<kw name="Log Many" library="BuiltIn">
<arg>Response Status Code:</arg>
<arg>${API_RESPONSE.status_code}</arg>
<arg>Response Body:</arg>
<arg>${API_RESPONSE.content}</arg>
<arg>Response Headers:</arg>
<arg>${API_RESPONSE.headers}</arg>
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<msg timestamp="20221008 17:00:18.176" level="INFO">Response Status Code:</msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">200</msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">Response Body:</msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">[{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"},{"natid":"zzzz$$$$$","name":"caroline","relief":"548.00"},{"natid":"KKD3$$$$","name":"KAmani","relief":"17911588.81"},{"natid":"QQD3$$$$","name":"Kristine","relief":"14711596.81"},{"natid":"LKLD$$$$$","name":"Harshil","relief":"6055089.61"},{"natid":"ASDS$$$$$","name":"Harshil","relief":"1207264.00"},{"natid":"ered$$$","name":"Rama","relief":"1151416.81"},{"natid":"zzzz$$$$$","name":"caroline","relief":"548.00"}]</msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">Response Headers:</msg>
<msg timestamp="20221008 17:00:18.176" level="INFO">{'Content-Type': 'application/json;charset=UTF-8', 'Transfer-Encoding': 'chunked', 'Date': 'Sat, 08 Oct 2022 11:30:18 GMT'}</msg>
<status status="PASS" starttime="20221008 17:00:18.176" endtime="20221008 17:00:18.176"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${API_RESPONSE}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20221008 17:00:18.176" level="INFO">${API_RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20221008 17:00:18.176" endtime="20221008 17:00:18.176"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.176" endtime="20221008 17:00:18.176"/>
</kw>
<kw name="Get python object for JSON" library="API_Helper">
<var>${taxRelief_list}</var>
<arg>${API_RESPONSE.content}</arg>
<kw name="Evaluate" library="BuiltIn">
<var>${python_data}</var>
<arg>json.loads('''${json_value}''')</arg>
<arg>json</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20221008 17:00:18.191" level="INFO">${python_data} = [{'natid': 'KKD3$$$$', 'name': 'KAmani', 'relief': '17911588.81'}, {'natid': 'QQD3$$$$', 'name': 'Kristine', 'relief': '14711596.81'}, {'natid': 'LKLD$$$$$', 'name': 'Harshil', 'relief': '6055089.61'}...</msg>
<status status="PASS" starttime="20221008 17:00:18.176" endtime="20221008 17:00:18.191"/>
</kw>
<msg timestamp="20221008 17:00:18.191" level="INFO">${taxRelief_list} = [{'natid': 'KKD3$$$$', 'name': 'KAmani', 'relief': '17911588.81'}, {'natid': 'QQD3$$$$', 'name': 'Kristine', 'relief': '14711596.81'}, {'natid': 'LKLD$$$$$', 'name': 'Harshil', 'relief': '6055089.61'}...</msg>
<status status="PASS" starttime="20221008 17:00:18.176" endtime="20221008 17:00:18.191"/>
</kw>
<for flavor="IN">
<var>${user_record}</var>
<value>@{taxRelief_list}</value>
<iter>
<var name="${user_record}">{'natid': 'KKD3$$$$', 'name': 'KAmani', 'relief': '17911588.81'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'QQD3$$$$', 'name': 'Kristine', 'relief': '14711596.81'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'LKLD$$$$$', 'name': 'Harshil', 'relief': '6055089.61'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'ASDS$$$$$', 'name': 'Harshil', 'relief': '1207264.00'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'ered$$$', 'name': 'Rama', 'relief': '1151416.81'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'zzzz$$$$$', 'name': 'caroline', 'relief': '548.00'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20221008 17:00:18.191" level="INFO">${tax_relief_response} = 548.00</msg>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20221008 17:00:18.191" level="INFO">${tax_relief_response} = 548.00</msg>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'KKD3$$$$', 'name': 'KAmani', 'relief': '17911588.81'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.191"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'QQD3$$$$', 'name': 'Kristine', 'relief': '14711596.81'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.207"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.207"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.207"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'LKLD$$$$$', 'name': 'Harshil', 'relief': '6055089.61'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'ASDS$$$$$', 'name': 'Harshil', 'relief': '1207264.00'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'ered$$$', 'name': 'Rama', 'relief': '1151416.81'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<status status="NOT RUN" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</iter>
<iter>
<var name="${user_record}">{'natid': 'zzzz$$$$$', 'name': 'caroline', 'relief': '548.00'}</var>
<if>
<branch type="IF" condition="&quot;${user_record}[name]&quot; == &quot;${Single_record}[name]&quot;">
<kw name="Set Variable" library="BuiltIn">
<var>${tax_relief_response}</var>
<arg>${user_record}[relief]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20221008 17:00:18.207" level="INFO">${tax_relief_response} = 548.00</msg>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${tax_relief_response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20221008 17:00:18.207" level="INFO">${tax_relief_response} = 548.00</msg>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</branch>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</if>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</iter>
<status status="PASS" starttime="20221008 17:00:18.191" endtime="20221008 17:00:18.207"/>
</for>
<kw name="Convert To String" library="BuiltIn">
<var>${yyyy}</var>
<arg>${Single_record}[birthday]</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20221008 17:00:18.207" level="INFO">${yyyy} = 10101995</msg>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Get Substring" library="String">
<var>${birth_year}</var>
<arg>${YYYY}</arg>
<arg>-4</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20221008 17:00:18.207" level="INFO">${birth_year} = 1995</msg>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${age}</var>
<arg>2022 - ${birth_year}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20221008 17:00:18.207" level="INFO">${age} = 27</msg>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Get Final Tax Relief" library="tax_relief">
<var>${tax_relief_compute}</var>
<arg>${Single_record}[salary]</arg>
<arg>${Single_record}[tax]</arg>
<arg>${age}</arg>
<arg>${Single_record}[gender]</arg>
<msg timestamp="20221008 17:00:18.207" level="INFO">${tax_relief_compute} = 548.00</msg>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${tax_relief_compute}</arg>
<arg>${tax_relief_response}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="TEARDOWN">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:18.207"/>
</kw>
<doc>This test case will use the formula and calculate and validate the tax relief</doc>
<tag>regression</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20221008 17:00:18.160" endtime="20221008 17:00:18.207"/>
</test>
<status status="PASS" starttime="20221008 17:00:17.988" endtime="20221008 17:00:18.207"/>
</suite>
<suite id="s1-s5" name="User Story 5" source="C:\Users\kapoo\Downloads\Compressed\Oppenheimer-20221002T171833Z-001\Oppenheimer\Oppenheimer\Tests\User_Story_5.robot">
<test id="s1-s5-t1" name="TC_1: Validate Dispense Now button on the UI must be red-colored">
<kw name="Navigate to Oppenheimer Project" library="Oppenheimer_common">
<doc>Navigate to the Oppenheimer Project page</doc>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${base_URL}</arg>
<arg>chrome</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20221008 17:00:18.223" level="INFO">Opening browser 'chrome' to base url 'http://localhost:8080/'.</msg>
<status status="PASS" starttime="20221008 17:00:18.223" endtime="20221008 17:00:20.741"/>
</kw>
<kw name="Set Screenshot Directory" library="SeleniumLibrary">
<arg>EMBED</arg>
<doc>Sets the directory for captured screenshots.</doc>
<status status="PASS" starttime="20221008 17:00:20.741" endtime="20221008 17:00:20.741"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20221008 17:00:20.741" endtime="20221008 17:00:20.879"/>
</kw>
<status status="PASS" starttime="20221008 17:00:18.223" endtime="20221008 17:00:20.879"/>
</kw>
<kw name="Execute Javascript" library="SeleniumLibrary">
<var>${style}</var>
<arg>return getComputedStyle(document.querySelector('a.btn.btn-danger.btn-block')).getPropertyValue('background-color')</arg>
<doc>Executes the given JavaScript code with possible arguments.</doc>
<msg timestamp="20221008 17:00:20.879" level="INFO">Executing JavaScript:
return getComputedStyle(document.querySelector('a.btn.btn-danger.btn-block')).getPropertyValue('background-color')
Without any arguments.</msg>
<msg timestamp="20221008 17:00:20.879" level="INFO">${style} = rgb(220, 53, 69)</msg>
<status status="PASS" starttime="20221008 17:00:20.879" endtime="20221008 17:00:20.879"/>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${style}</arg>
<arg>${Red_Color}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20221008 17:00:20.879" endtime="20221008 17:00:20.879"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="TEARDOWN">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20221008 17:00:20.879" endtime="20221008 17:00:23.062"/>
</kw>
<doc>This test case is validating the Dispense Now button color attribute</doc>
<tag>regression</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20221008 17:00:18.223" endtime="20221008 17:00:23.062"/>
</test>
<test id="s1-s5-t2" name="TC_2: Validate the text on the button must be exactly “Dispense Now”">
<kw name="Navigate to Oppenheimer Project" library="Oppenheimer_common">
<doc>Navigate to the Oppenheimer Project page</doc>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${base_URL}</arg>
<arg>chrome</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20221008 17:00:23.062" level="INFO">Opening browser 'chrome' to base url 'http://localhost:8080/'.</msg>
<status status="PASS" starttime="20221008 17:00:23.062" endtime="20221008 17:00:25.336"/>
</kw>
<kw name="Set Screenshot Directory" library="SeleniumLibrary">
<arg>EMBED</arg>
<doc>Sets the directory for captured screenshots.</doc>
<status status="PASS" starttime="20221008 17:00:25.336" endtime="20221008 17:00:25.336"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20221008 17:00:25.336" endtime="20221008 17:00:25.477"/>
</kw>
<status status="PASS" starttime="20221008 17:00:23.062" endtime="20221008 17:00:25.477"/>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<arg>${Dispense_button}</arg>
<arg>Dispense Now</arg>
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<msg timestamp="20221008 17:00:25.477" level="INFO">Verifying element '//*[@class= 'btn btn-danger btn-block']' contains exact text 'Dispense Now'.</msg>
<status status="PASS" starttime="20221008 17:00:25.477" endtime="20221008 17:00:25.508"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="TEARDOWN">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20221008 17:00:25.508" endtime="20221008 17:00:27.651"/>
</kw>
<doc>This test case is validating the Dispense Now text on the UI</doc>
<tag>regression</tag>
<status status="PASS" starttime="20221008 17:00:23.062" endtime="20221008 17:00:27.651"/>
</test>
<test id="s1-s5-t3" name="TC_3: Click on Dispense Now Button and validate text that says “Cash dispensed”">
<kw name="Navigate to Oppenheimer Project" library="Oppenheimer_common">
<doc>Navigate to the Oppenheimer Project page</doc>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${base_URL}</arg>
<arg>chrome</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20221008 17:00:27.651" level="INFO">Opening browser 'chrome' to base url 'http://localhost:8080/'.</msg>
<status status="PASS" starttime="20221008 17:00:27.651" endtime="20221008 17:00:29.877"/>
</kw>
<kw name="Set Screenshot Directory" library="SeleniumLibrary">
<arg>EMBED</arg>
<doc>Sets the directory for captured screenshots.</doc>
<status status="PASS" starttime="20221008 17:00:29.877" endtime="20221008 17:00:29.877"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20221008 17:00:29.877" endtime="20221008 17:00:30.008"/>
</kw>
<status status="PASS" starttime="20221008 17:00:27.651" endtime="20221008 17:00:30.008"/>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<arg>${Dispense_button}</arg>
<arg>Dispense Now</arg>
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<msg timestamp="20221008 17:00:30.008" level="INFO">Verifying element '//*[@class= 'btn btn-danger btn-block']' contains exact text 'Dispense Now'.</msg>
<status status="PASS" starttime="20221008 17:00:30.008" endtime="20221008 17:00:30.039"/>
</kw>
<kw name="Dispense taxRelief" library="Oppenheimer_common">
<arg>${Dispense_button}</arg>
<doc>Dispense tax relief for working class heroes</doc>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${Dispense_button}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20221008 17:00:30.039" level="INFO">Clicking element '//*[@class= 'btn btn-danger btn-block']'.</msg>
<status status="PASS" starttime="20221008 17:00:30.039" endtime="20221008 17:00:30.387"/>
</kw>
<status status="PASS" starttime="20221008 17:00:30.039" endtime="20221008 17:00:30.387"/>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<arg>${cash_dispensed_text}</arg>
<arg>Cash dispensed</arg>
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<msg timestamp="20221008 17:00:30.387" level="INFO">Verifying element '//*[@class='display-4 font-weight-bold']' contains exact text 'Cash dispensed'.</msg>
<status status="PASS" starttime="20221008 17:00:30.387" endtime="20221008 17:00:30.410"/>
</kw>
<kw name="Close Browser" library="SeleniumLibrary" type="TEARDOWN">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20221008 17:00:30.410" endtime="20221008 17:00:32.550"/>
</kw>
<doc>This test case is clicking on Dispense now button
and navigate to the next page and validate text that says “Cash dispensed”</doc>
<tag>regression</tag>
<tag>sanity</tag>
<status status="PASS" starttime="20221008 17:00:27.651" endtime="20221008 17:00:32.550"/>
</test>
<status status="PASS" starttime="20221008 17:00:18.207" endtime="20221008 17:00:32.550"/>
</suite>
<status status="PASS" starttime="20221008 17:00:05.340" endtime="20221008 17:00:32.550"/>
</suite>
<statistics>
<total>
<stat pass="18" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="18" fail="0" skip="0">regression</stat>
<stat pass="8" fail="0" skip="0">sanity</stat>
</tag>
<suite>
<stat pass="18" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="User Story 1">Tests.User Story 1</stat>
<stat pass="5" fail="0" skip="0" id="s1-s2" name="User Story 2">Tests.User Story 2</stat>
<stat pass="2" fail="0" skip="0" id="s1-s3" name="User Story 3">Tests.User Story 3</stat>
<stat pass="3" fail="0" skip="0" id="s1-s4" name="User Story 4">Tests.User Story 4</stat>
<stat pass="3" fail="0" skip="0" id="s1-s5" name="User Story 5">Tests.User Story 5</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
